#!/usr/bin/env python
#
# Copyright (C) 2018 Layered Insight - All Rights Reserved
# Unauthorized copying of this file, via any medium is strictly prohibited
# Proprietary and confidential

from __future__ import print_function
import argparse
import json
import sys
import layint_runtime_api
from pprint import pprint
from layint_runtime_api.rest import ApiException
from vyper import v
from li_utils.envtools import env_setup

# Parse CLI
parser = argparse.ArgumentParser()
parser.add_argument("-v", "--verbose", help="Verbose logging", action="store_true")
parser.add_argument("--policyid", help="ID of policy to get", required=True)
args = parser.parse_args()

env_setup()

layint_runtime_api.configuration.api_key['Authorization'] = v.get("api_key")
# layint_runtime_api.configuration.debug = True
policy_api = layint_runtime_api.PolicyApi()
policy_api.api_client.host = v.get("api_host")

if args.verbose:
    print("Looking up policy %s on API host %s..." % (args.policyid, v.get("api_host")))
try:
    policy = policy_api.get_policy(args.policyid)
except ApiException as e:
    print("Exception when calling PolicyAPI->get_policy: %s\n" % e)
    sys.exit(1)


def remove_prefix_str(t, prefix):
    if t.startswith(prefix):
        return t[len(prefix):]
    return t

def remove_prefix(o):
    for k in o.keys():
        nkey = remove_prefix_str(k,"_")
        if nkey != k:
            o[nkey] = o[k]
            del o[k]
    return o



if args.verbose:
    print(json.dumps(json.loads(json.dumps(policy, default=lambda o: o.__dict__, indent=2), object_hook=remove_prefix)))
else:
    print(" %s - %s - %s" % (policy.id, policy.name, policy.description))
